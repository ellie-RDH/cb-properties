name: Fetch Expert Agent XML

on:
  schedule:
    - cron: "0 * * * *"   # every hour (UTC)
  workflow_dispatch: {}    # allow manual run

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install lftp and unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp unzip

      - name: Mirror newest XML or ZIP from FTP (recursive, no known path needed)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASS: ${{ secrets.FTP_PASS }}
        run: |
          set -e
          mkdir -p tmp/xml tmp/zip

          # 1) Pull any newer XML files from anywhere on the FTP into tmp/xml
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" <<EOF
          set ftp:passive-mode true
          set ssl:verify-certificate no
          mirror --verbose --only-newer --parallel=2 --include-glob *.xml / tmp/xml
          bye
          EOF

          # 2) If no XML arrived, try ZIPs into tmp/zip
          if [ -z "$(ls -1 tmp/xml 2>/dev/null | head -n1)" ]; then
            echo "No XML found, trying ZIPs..."
            lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" <<EOF
            set ftp:passive-mode true
            set ssl:verify-certificate no
            mirror --verbose --only-newer --parallel=2 --include-glob *.zip / tmp/zip
            bye
            EOF
          fi

          # 3) Decide source file: prefer most recent XML; else most recent ZIP
          pick_latest() {
            (ls -1t "$1" 2>/dev/null || true) | head -n1
          }

          LATEST_XML_FILE=$(pick_latest tmp/xml)
          LATEST_ZIP_FILE=$(pick_latest tmp/zip)

          if [ -n "$LATEST_XML_FILE" ]; then
            echo "Using XML: $LATEST_XML_FILE"
            cp "tmp/xml/$LATEST_XML_FILE" tmp/new.xml
          elif [ -n "$LATEST_ZIP_FILE" ]; then
            echo "Using ZIP: $LATEST_ZIP_FILE"
            unzip -o "tmp/zip/$LATEST_ZIP_FILE" -d tmp/unz >> /dev/null
            FOUND_XML=$(ls -1 tmp/unz/*.xml 2>/dev/null | head -n1 || true)
            if [ -z "$FOUND_XML" ]; then
              echo "ZIP did not contain an XML file"
              exit 1
            fi
            cp "$FOUND_XML" tmp/new.xml
          else
            echo "No XML or ZIP found anywhere on FTP"
            exit 1
          fi

          # 4) Update repo file only if content changed
          if [ ! -f properties.xml ] || ! cmp -s tmp/new.xml properties.xml; then
            mv tmp/new.xml properties.xml
            echo "UPDATED=1" >> $GITHUB_ENV
            echo "properties.xml updated"
          else
            echo "No change in properties.xml"
          fi

      - name: Commit and push if changed
        if: env.UPDATED == '1'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add properties.xml
          git commit -m "Update properties.xml from FTP (recursive mirror)"
          git push
