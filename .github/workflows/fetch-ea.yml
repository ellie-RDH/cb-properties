name: Fetch Expert Agent XML (debug)

on:
  schedule:
    - cron: "0 * * * *"   # every hour (UTC)
  workflow_dispatch: {}    # allow manual run

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install lftp and unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp unzip

      # Optional: quick listing so we know what the FTP shows (kept for sanity)
      - name: FTP recursive listing (non-fatal)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASS: ${{ secrets.FTP_PASS }}
        run: |
          set +e
          mkdir -p tmp
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "set ftp:passive-mode true; set ssl:verify-certificate no; find -l /; bye" | tee tmp/tree.txt
          echo "===== FTP RECURSIVE LISTING (first 200 lines) ====="
          head -n 200 tmp/tree.txt || true
          echo "===================================================="

      # >>> This is the step you asked about. It STARTS here and ENDS before "Commit and push if changed".
      - name: Download properties.xml (fallback to properties2.xml)
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASS: ${{ secrets.FTP_PASS }}
        run: |
          set -euo pipefail
          mkdir -p tmp

          # Try /properties.xml first
          if lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "set ftp:passive-mode true; set ssl:verify-certificate no; get /properties.xml -o tmp/new.xml; bye"; then
            echo "Downloaded /properties.xml"
          else
            echo "properties.xml not found or download failed, trying /properties2.xml"
            lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" -e "set ftp:passive-mode true; set ssl:verify-certificate no; get /properties2.xml -o tmp/new.xml; bye"
            echo "Downloaded /properties2.xml"
          fi

          # Replace repo file only if content changed
          if [ ! -f properties.xml ] || ! cmp -s tmp/new.xml properties.xml; then
            mv tmp/new.xml properties.xml
            echo "UPDATED=1" >> $GITHUB_ENV
            echo "properties.xml updated"
          else
            echo "No change in properties.xml"
          fi
      # <<< The download step ENDS here.

      - name: Commit and push if changed
        if: env.UPDATED == '1'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add properties.xml
          git commit -m "Update properties.xml from FTP"
          git push
