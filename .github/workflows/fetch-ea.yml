name: Fetch Expert Agent XML

on:
  schedule:
    - cron: "0 * * * *"   # every hour (UTC)
  workflow_dispatch: {}    # allow manual run

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install lftp and unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp unzip

      - name: List and download latest XML or ZIP from FTP
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASS: ${{ secrets.FTP_PASS }}
          # Optional. Leave blank to use FTP root. If you know the folder, set it as a secret.
          FTP_PATH: ${{ secrets.FTP_PATH }}
        run: |
          set -e
          mkdir -p tmp

          # 1) List files in the folder (no quoted heredoc, so vars expand)
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" <<EOF > tmp/list.txt
          set ftp:passive-mode true
          set ssl:verify-certificate no
          $( [ -n "$FTP_PATH" ] && echo "cd $FTP_PATH" )
          pwd
          cls -1 --sort=name
          bye
          EOF

          echo "=== PWD and listing ==="
          cat tmp/list.txt || true
          echo "======================="

          # 2) Pick newest by name. Prefer XML, else ZIP.
          LATEST_XML=$(grep -E '\.xml$' tmp/list.txt | tail -n 1 || true)
          LATEST_ZIP=$(grep -E '\.zip$' tmp/list.txt | tail -n 1 || true)

          if [ -n "$LATEST_XML" ]; then
            echo "Latest XML: $LATEST_XML"
            SRC="$LATEST_XML"
            DOWNLOAD_AS="tmp/new.xml"
            IS_ZIP=0
          elif [ -n "$LATEST_ZIP" ]; then
            echo "Latest ZIP: $LATEST_ZIP"
            SRC="$LATEST_ZIP"
            DOWNLOAD_AS="tmp/new.zip"
            IS_ZIP=1
          else
            echo "No .xml or .zip found in listing"
            exit 1
          fi

          # 3) Download the chosen file
          lftp -u "$FTP_USER","$FTP_PASS" "$FTP_HOST" <<EOF
          set ftp:passive-mode true
          set ssl:verify-certificate no
          $( [ -n "$FTP_PATH" ] && echo "cd $FTP_PATH" )
          get "$SRC" -o "$DOWNLOAD_AS"
          bye
          EOF

          # 4) If ZIP, extract first XML inside
          if [ "$IS_ZIP" -eq 1 ]; then
            echo "Unzipping $DOWNLOAD_AS"
            unzip -o "$DOWNLOAD_AS" -d tmp
            FOUND_XML=$(ls -1 tmp/*.xml | head -n 1 || true)
            if [ -z "$FOUND_XML" ]; then
              echo "ZIP did not contain an XML file"
              exit 1
            fi
            cp "$FOUND_XML" tmp/new.xml
          fi

          # 5) Replace repo file only if changed
          if [ ! -f properties.xml ] || ! cmp -s tmp/new.xml properties.xml; then
            mv tmp/new.xml properties.xml
            echo "UPDATED=1" >> $GITHUB_ENV
            echo "properties.xml updated"
          else
            echo "No change in properties.xml"
          fi

      - name: Commit and push if changed
        if: env.UPDATED == '1'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add properties.xml
          git commit -m "Update properties.xml from FTP"
          git push
